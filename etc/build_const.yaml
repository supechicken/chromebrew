# build_const.yaml: Defines constants used in building packages from source

CREW_TGT: |-
  #{
    case ARCH
    when 'aarch64', 'armv7l'
      'armv7l-cros-linux-gnueabihf'
    when 'i686'
      'i686-cros-linux-gnu'
    when 'x86_64'
      'x86_64-cros-linux-gnu'
    end
  }

CREW_BUILD: "#{CREW_TGT}"

CREW_LINKER       : "#{ENV.fetch('CREW_LINKER', 'mold')}"
CREW_LINKER_FLAGS : "#{ENV.fetch('CREW_LINKER_FLAGS', nil)}"

CREW_CORE_FLAGS           : "-O2 -pipe -ffat-lto-objects -fPIC -fuse-ld=#{CREW_LINKER} #{CREW_LINKER_FLAGS}"
CREW_COMMON_FLAGS         : "#{CREW_CORE_FLAGS} -flto"
CREW_COMMON_FNO_LTO_FLAGS : "#{CREW_CORE_FLAGS} -fno-lto"
CREW_LDFLAGS              : "-flto #{CREW_LINKER_FLAGS}"
CREW_FNO_LTO_LDFLAGS      : -fno-lto

CREW_ENV_OPTIONS: |-
  #{
    CREW_ENV_OPTIONS_HASH = if CREW_DISABLE_ENV_OPTIONS
                              { 'CREW_DISABLE_ENV_OPTIONS' => '1' }
                            else
                              {
                                'CFLAGS'   => CREW_COMMON_FLAGS,
                                'CXXFLAGS' => CREW_COMMON_FLAGS,
                                'FCFLAGS'  => CREW_COMMON_FLAGS,
                                'FFLAGS'   => CREW_COMMON_FLAGS,
                                'LDFLAGS'  => CREW_LDFLAGS
                              }
                            end

    # parse from hash to shell readable string
    CREW_ENV_OPTIONS_HASH.map { |k, v| "#{k}=\"#{v}\"" }.join(' ')
  }

CREW_ENV_FNO_LTO_OPTIONS: |-
  #{
    CREW_ENV_FNO_LTO_OPTIONS_HASH = if CREW_DISABLE_ENV_OPTIONS
                                      { 'CREW_DISABLE_ENV_OPTIONS' => '1' }
                                    else
                                      {
                                        'CFLAGS'   => CREW_COMMON_FNO_LTO_FLAGS,
                                        'CXXFLAGS' => CREW_COMMON_FNO_LTO_FLAGS,
                                        'FCFLAGS'  => CREW_COMMON_FNO_LTO_FLAGS,
                                        'FFLAGS'   => CREW_COMMON_FNO_LTO_FLAGS,
                                        'LDFLAGS'  => CREW_FNO_LTO_LDFLAGS"
                                      }
                                    end

    # parse from hash to shell readable string
    CREW_ENV_FNO_LTO_OPTIONS_HASH.map { |k, v| "#{k}=\"#{v}\"" }.join(' ')
  }

# Use ninja or samurai
CREW_NINJA                : "#{ENV.fetch('CREW_NINJA', 'samu')}"

CREW_OPTIONS: >-
  --prefix=#{CREW_PREFIX}
  --libdir=#{CREW_LIB_PREFIX}
  --mandir=#{CREW_MAN_PREFIX}
  --build=#{CREW_BUILD}
  --host=#{CREW_TGT}
  --target=#{CREW_TGT}
  --program-prefix=''
  --program-suffix=''

CREW_MESON_OPTIONS: >-
  -Dprefix=#{CREW_PREFIX}
  -Dlibdir=#{CREW_LIB_PREFIX}
  -Dmandir=#{CREW_MAN_PREFIX}
  -Dbuildtype=release
  -Db_lto=true
  -Dstrip=true
  -Db_pie=true
  -Dcpp_args='#{CREW_CORE_FLAGS}'
  -Dc_args='#{CREW_CORE_FLAGS}'

CREW_MESON_FNO_LTO_OPTIONS: >-
  -Dprefix=#{CREW_PREFIX}
  -Dlibdir=#{CREW_LIB_PREFIX}
  -Dmandir=#{CREW_MAN_PREFIX}
  -Dbuildtype=release
  -Db_lto=false
  -Dstrip=true
  -Db_pie=true
  -Dcpp_args='#{CREW_CORE_FLAGS}'
  -Dc_args='#{CREW_CORE_FLAGS}'

CREW_CMAKE_OPTIONS: >-
  -DCMAKE_INSTALL_PREFIX=#{CREW_PREFIX}
  -DCMAKE_LIBRARY_PATH=#{CREW_LIB_PREFIX}
  -DCMAKE_C_FLAGS='#{CREW_COMMON_FLAGS}'
  -DCMAKE_CXX_FLAGS='#{CREW_COMMON_FLAGS}'
  -DCMAKE_EXE_LINKER_FLAGS='#{CREW_LDFLAGS}'
  -DCMAKE_SHARED_LINKER_FLAGS='#{CREW_LDFLAGS}'
  -DCMAKE_STATIC_LINKER_FLAGS='#{CREW_LDFLAGS}'
  -DCMAKE_MODULE_LINKER_FLAGS='#{CREW_LDFLAGS}'
  -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=TRUE
  -DCMAKE_BUILD_TYPE=Release

CREW_CMAKE_FNO_LTO_OPTIONS: >-
  -DCMAKE_INSTALL_PREFIX=#{CREW_PREFIX}
  -DCMAKE_LIBRARY_PATH=#{CREW_LIB_PREFIX}
  -DCMAKE_C_FLAGS='#{CREW_COMMON_FNO_LTO_FLAGS}'
  -DCMAKE_CXX_FLAGS='#{CREW_COMMON_FNO_LTO_FLAGS}'
  -DCMAKE_EXE_LINKER_FLAGS=#{CREW_FNO_LTO_LDFLAGS}
  -DCMAKE_SHARED_LINKER_FLAGS=#{CREW_FNO_LTO_LDFLAGS}
  -DCMAKE_STATIC_LINKER_FLAGS=#{CREW_FNO_LTO_LDFLAGS}
  -DCMAKE_MODULE_LINKER_FLAGS=#{CREW_FNO_LTO_LDFLAGS}
  -DCMAKE_BUILD_TYPE=Release


PY3_SETUP_BUILD_OPTIONS          : --executable=#{CREW_PREFIX}/bin/python3
PY2_SETUP_BUILD_OPTIONS          : --executable=#{CREW_PREFIX}/bin/python2
PY_SETUP_INSTALL_OPTIONS_NO_SVEM : --root=#{CREW_DEST_DIR} --prefix=#{CREW_PREFIX} -O2 --compile
PY_SETUP_INSTALL_OPTIONS         : "#{PY_SETUP_INSTALL_OPTIONS_NO_SVEM} --single-version-externally-managed"
PY3_BUILD_OPTIONS                : --wheel --no-isolation
PY3_INSTALLER_OPTIONS            : --destdir=#{CREW_DEST_DIR} --compile-bytecode 2 dist/*.whl

# Cmake sometimes wants to use LIB_SUFFIX to install libs in LIB64, so specify such for x86_64
# This is often considered deprecated. See discussio at https://gitlab.kitware.com/cmake/cmake/-/issues/18640
# and also https://bugzilla.redhat.com/show_bug.cgi?id=1425064
# Let's have two CREW_CMAKE_OPTIONS since this avoids the logic in the recipe file.
CREW_CMAKE_LIBSUFFIX_OPTIONS: "#{CREW_CMAKE_OPTIONS} -DLIB_SUFFIX=#{CREW_LIB_SUFFIX}"